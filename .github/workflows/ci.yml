name: CI - Quality Gates

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  POETRY_VERSION: "1.7.1"
  POETRY_VENV_IN_PROJECT: true
  POETRY_CACHE_DIR: ~/.cache/pypoetry

jobs:
  lint-and-type-check:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Load cached Poetry installation
      id: cached-poetry
      uses: actions/cache@v4
      with:
        path: ~/.local
        key: poetry-${{ runner.os }}-${{ env.POETRY_VERSION }}

    - name: Install Poetry
      if: steps.cached-poetry.outputs.cache-hit != 'true'
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: |
        poetry install --with dev --no-root

    - name: Run Ruff linting
      run: |
        poetry run ruff check .

    - name: Run Ruff formatting check
      run: |
        poetry run ruff format --check .

    - name: Run MyPy type checking
      run: |
        poetry run mypy --strict .
      continue-on-error: true  # Allow to continue while we're still fixing type issues

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_envy_zeitgeist
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    env:
      # Test environment variables
      SUPABASE_URL: "http://localhost:5432"
      SUPABASE_ANON_KEY: "test_key"
      OPENAI_API_KEY: "test_openai_key"
      ANTHROPIC_API_KEY: "test_anthropic_key"
      SERPAPI_API_KEY: "test_serpapi_key"
      REDDIT_CLIENT_ID: "test_reddit_id"
      REDDIT_CLIENT_SECRET: "test_reddit_secret"
      REDDIT_USER_AGENT: "test_user_agent"
      YOUTUBE_API_KEY: "test_youtube_key"
      DATABASE_URL: "postgresql://test_user:test_password@localhost:5432/test_envy_zeitgeist"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Load cached Poetry installation
      id: cached-poetry
      uses: actions/cache@v4
      with:
        path: ~/.local
        key: poetry-${{ runner.os }}-${{ env.POETRY_VERSION }}

    - name: Install Poetry
      if: steps.cached-poetry.outputs.cache-hit != 'true'
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: |
        poetry install --with dev --no-root

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client

    - name: Set up test database
      run: |
        PGPASSWORD=test_password psql -h localhost -U test_user -d test_envy_zeitgeist -c "CREATE EXTENSION IF NOT EXISTS vector;"
        PGPASSWORD=test_password psql -h localhost -U test_user -d test_envy_zeitgeist -f supabase/migrations/001_init.sql || echo "Migration may have failed, continuing..."

    - name: Run tests with coverage
      run: |
        poetry run pytest --cov=envy_toolkit --cov=collectors --cov=agents --cov-fail-under=74 --cov-report=xml --cov-report=term-missing -v
      continue-on-error: false

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report-${{ matrix.python-version }}
        path: |
          coverage.xml
          htmlcov/

  build-validation:
    runs-on: ubuntu-latest
    needs: [lint-and-type-check, test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}

    - name: Build package
      run: |
        poetry build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/