name: Documentation

on:
  push:
    branches: [ main ]
    paths:
      - '**.py'
      - '**.md'
      - 'pyproject.toml'
      - '.github/workflows/docs.yml'
  pull_request:
    branches: [ main ]
    paths:
      - '**.py'
      - '**.md'
      - 'pyproject.toml'
      - '.github/workflows/docs.yml'

permissions:
  contents: read
  pages: write
  id-token: write

env:
  POETRY_VERSION: "1.7.1"

jobs:
  build-docs:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-docs-${{ runner.os }}-${{ hashFiles('**/pyproject.toml') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: |
        poetry install --with dev --no-root
        # Install documentation tools
        poetry add --group dev sphinx sphinx-rtd-theme sphinx-autodoc-typehints myst-parser

    - name: Generate API documentation
      run: |
        mkdir -p docs/api
        
        # Create Sphinx configuration
        cat > docs/conf.py << 'EOF'
        import os
        import sys
        sys.path.insert(0, os.path.abspath('..'))

        project = 'Envy Zeitgeist Engine'
        copyright = '2025, eNVy Media LLC'
        author = 'eNVy Media Team'
        version = '0.1.0'
        release = '0.1.0'

        extensions = [
            'sphinx.ext.autodoc',
            'sphinx.ext.viewcode',
            'sphinx.ext.napoleon',
            'sphinx.ext.intersphinx',
            'sphinx_autodoc_typehints',
            'myst_parser',
        ]

        templates_path = ['_templates']
        exclude_patterns = ['_build', 'Thumbs.db', '.DS_Store']

        html_theme = 'sphinx_rtd_theme'
        html_static_path = ['_static']

        autodoc_default_options = {
            'members': True,
            'member-order': 'bysource',
            'special-members': '__init__',
            'undoc-members': True,
            'exclude-members': '__weakref__'
        }

        napoleon_google_docstring = True
        napoleon_numpy_docstring = True
        napoleon_include_init_with_doc = False
        napoleon_include_private_with_doc = False
        EOF

        # Create index.rst
        cat > docs/index.rst << 'EOF'
        Envy Zeitgeist Engine Documentation
        ==================================

        .. toctree::
           :maxdepth: 2
           :caption: Contents:

           modules

        Indices and tables
        ==================

        * :ref:`genindex`
        * :ref:`modindex`
        * :ref:`search`
        EOF

        # Generate module documentation
        poetry run sphinx-apidoc -o docs/ . tests/ setup.py --force --module-first

        # Build documentation
        poetry run sphinx-build -b html docs/ docs/_build/html

    - name: Generate coverage badge
      run: |
        # Extract coverage percentage from latest coverage report
        COVERAGE=$(python -c "
        import xml.etree.ElementTree as ET
        try:
            tree = ET.parse('coverage.xml')
            root = tree.getroot()
            coverage = float(root.attrib['line-rate']) * 100
            print(f'{coverage:.0f}')
        except:
            print('74')  # Fallback to current coverage
        ")
        
        echo "Coverage: ${COVERAGE}%"
        echo "COVERAGE_PERCENT=${COVERAGE}" >> $GITHUB_ENV

    - name: Update README badges
      run: |
        python << 'EOF'
        import re
        
        # Read current README
        with open('README.md', 'r') as f:
            content = f.read()
        
        # Define badge URLs
        ci_badge = "[![CI](https://github.com/${{ github.repository }}/actions/workflows/ci.yml/badge.svg)](https://github.com/${{ github.repository }}/actions/workflows/ci.yml)"
        security_badge = "[![Security](https://github.com/${{ github.repository }}/actions/workflows/security.yml/badge.svg)](https://github.com/${{ github.repository }}/actions/workflows/security.yml)"
        docs_badge = "[![Documentation](https://github.com/${{ github.repository }}/actions/workflows/docs.yml/badge.svg)](https://github.com/${{ github.repository }}/actions/workflows/docs.yml)"
        coverage_badge = f"[![Coverage](https://img.shields.io/badge/coverage-{os.environ.get('COVERAGE_PERCENT', '74')}%25-{'green' if int(os.environ.get('COVERAGE_PERCENT', '74')) >= 80 else 'orange'})](https://github.com/${{ github.repository }}/actions/workflows/ci.yml)"
        python_badge = "[![Python 3.11+](https://img.shields.io/badge/python-3.11+-blue.svg)](https://www.python.org/downloads/)"
        license_badge = "[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)"
        
        # Insert badges after the title
        badges = f"\n\n{ci_badge} {security_badge} {docs_badge} {coverage_badge} {python_badge} {license_badge}\n"
        
        # Check if badges already exist
        if "[![CI]" in content:
            # Replace existing badges section
            content = re.sub(r'\n\n\[!\[CI\].*?\n', badges, content, flags=re.DOTALL)
        else:
            # Insert badges after the first line (title)
            lines = content.split('\n')
            lines.insert(1, badges.strip())
            content = '\n'.join(lines)
        
        # Write updated README
        with open('README.md', 'w') as f:
            f.write(content)
        EOF

    - name: Setup Pages
      if: github.ref == 'refs/heads/main'
      uses: actions/configure-pages@v3

    - name: Upload documentation artifacts
      uses: actions/upload-artifact@v3
      with:
        name: documentation
        path: docs/_build/html/

    - name: Upload Pages artifact
      if: github.ref == 'refs/heads/main'
      uses: actions/upload-pages-artifact@v2
      with:
        path: docs/_build/html/

  deploy-docs:
    if: github.ref == 'refs/heads/main'
    needs: build-docs
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v2

  validate-readme:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Validate README links
      run: |
        # Install markdown link checker
        npm install -g markdown-link-check
        
        # Check README links
        markdown-link-check README.md --config .github/markdown-link-check.json || true

    - name: Check README formatting
      run: |
        # Install prettier for markdown formatting check
        npm install -g prettier
        
        # Check if README is properly formatted
        prettier --check README.md || echo "README formatting could be improved"

  update-changelog:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Generate changelog
      run: |
        # Create changelog if it doesn't exist
        if [ ! -f CHANGELOG.md ]; then
          cat > CHANGELOG.md << 'EOF'
        # Changelog

        All notable changes to this project will be documented in this file.

        The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
        and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

        ## [Unreleased]

        ### Added
        - Initial release of Envy Zeitgeist Engine
        - Comprehensive CI/CD pipeline with GitHub Actions
        - Multi-collector data ingestion system
        - LLM-powered trend analysis and clustering
        - Docker-based deployment support
        EOF
        fi